# Workflow to build the parallelproj C/CUDA libs (incl. installation of CUDA)
name: Build CUDA ubuntu-latest

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - uses: Jimver/cuda-toolkit@v0.2.11
      id: cuda-toolkit
      with:
        cuda: '12.1.0'
        method: 'network'

    - name: Build C/CUDA libs with CMake
      # Build your program with the given configuration
      run: sudo cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Test_C
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # we have to skip the CUDA tests since there are now CUDA devices available
      run: ctest -C ${{env.BUILD_TYPE}} -VV -E cuda
